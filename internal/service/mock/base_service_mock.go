// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferdiebergado/goweb/internal/service (interfaces: BaseService)
//
// Generated by this command:
//
//	mockgen -destination=mock/base_service_mock.go -package=mock . BaseService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBaseService is a mock of BaseService interface.
type MockBaseService struct {
	ctrl     *gomock.Controller
	recorder *MockBaseServiceMockRecorder
	isgomock struct{}
}

// MockBaseServiceMockRecorder is the mock recorder for MockBaseService.
type MockBaseServiceMockRecorder struct {
	mock *MockBaseService
}

// NewMockBaseService creates a new mock instance.
func NewMockBaseService(ctrl *gomock.Controller) *MockBaseService {
	mock := &MockBaseService{ctrl: ctrl}
	mock.recorder = &MockBaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseService) EXPECT() *MockBaseServiceMockRecorder {
	return m.recorder
}

// PingDB mocks base method.
func (m *MockBaseService) PingDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockBaseServiceMockRecorder) PingDB(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockBaseService)(nil).PingDB), ctx)
}
