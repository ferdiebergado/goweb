// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferdiebergado/goweb/internal/repository (interfaces: BaseRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/base_repo_mock.go -package=mock . BaseRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBaseRepository is a mock of BaseRepository interface.
type MockBaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBaseRepositoryMockRecorder
	isgomock struct{}
}

// MockBaseRepositoryMockRecorder is the mock recorder for MockBaseRepository.
type MockBaseRepositoryMockRecorder struct {
	mock *MockBaseRepository
}

// NewMockBaseRepository creates a new mock instance.
func NewMockBaseRepository(ctrl *gomock.Controller) *MockBaseRepository {
	mock := &MockBaseRepository{ctrl: ctrl}
	mock.recorder = &MockBaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseRepository) EXPECT() *MockBaseRepositoryMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockBaseRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockBaseRepositoryMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBaseRepository)(nil).Ping), ctx)
}
